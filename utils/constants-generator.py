#!/usr/bin/env python3

import re

print_matcher = re.compile(r'#define (XK_[\w|\d]*).*U\+([\w|\d]*)')
printable = []
composed_matcher = re.compile(
	r'<(\w*)>\s*<([\w|\d]*)>(?:\s*<([\w|\d]*)>)?(?:\s*<([\w|\d]*)>)?\s*:\s*\"(.*)\"')
composed = []
parse = False

groups = ['XK_LATIN1', 'XK_LATIN2', 'XK_LATIN3', 'XK_LATIN4', 'XK_LATIN8',
		'XK_LATIN9', 'XK_KATAKANA', 'XK_ARABIC', 'XK_CYRILLIC', 'XK_GREEK',
		'XK_PUBLISHING', 'XK_HEBREW', 'XK_THAI', 'XK_KOREAN', 'XK_ARMENIAN',
		'XK_GEORGIAN', 'XK_CAUCASUS', 'XK_VIETNAMESE', 'XK_CURRENCY',
		'XK_MATHEMATICAL', 'XK_SINHALA']

warning = "# This file is autogenerated by utils/constants-generator.py\n"\
			"# You shouldn't edit this file directly.\n\n"

imports = '''from Xlib import XK

_keysymdef = __import__('KEYSYMDEF')
_keysyms = [n for n in dir(_keysymdef)]
for keysym in _keysyms:
	XK.__dict__[keysym] = _keysymdef.__dict__[keysym]
del _keysymdef
XK.load_keysym_group('miscellany')
XK.load_keysym_group('latin1')
XK.load_keysym_group('latin2')
XK.load_keysym_group('latin3')
XK.load_keysym_group('latin4')
XK.load_keysym_group('arabic')
XK.load_keysym_group('cyrillic')
XK.load_keysym_group('greek')
XK.load_keysym_group('hebrew')
XK.load_keysym_group('katakana')
XK.load_keysym_group('korean')
XK.load_keysym_group('publishing')
XK.load_keysym_group('thai')
XK.load_keysym_group('xkb')
XK.load_keysym_group('technical')

'''

keypad = '''	'XK_KP_Space' : '\u0020',
	XK.XK_KP_0 : '\u0030',
	XK.XK_KP_1 : '\u0031',
	XK.XK_KP_2 : '\u0032',
	XK.XK_KP_3 : '\u0033',
	XK.XK_KP_4 : '\u0034',
	XK.XK_KP_5 : '\u0035',
	XK.XK_KP_6 : '\u0036',
	XK.XK_KP_7 : '\u0037',
	XK.XK_KP_8 : '\u0038',
	XK.XK_KP_9 : '\u0039',
	XK.XK_KP_Divide : '\u002F',
	XK.XK_KP_Multiply : '\u002A',
	XK.XK_KP_Add : '\u002B',
	XK.XK_KP_Subtract : '\u002D',
	XK.XK_KP_Decimal : '\u002E',
	XK.XK_KP_Separator : '\u002C'}
'''

modifiers = '''
MODIFIERS = {
	XK.XK_Shift_L,
	XK.XK_Shift_R,
	XK.XK_Caps_Lock,
	XK.XK_Num_Lock,
	XK.XK_Shift_Lock,
	XK.XK_ISO_Level3_Shift,
	XK.XK_Alt_L,
	XK.XK_Alt_R,
	XK.XK_Control_L,
	XK.XK_Control_R,
	XK.XK_Meta_L,
	XK.XK_Meta_R,
	XK.XK_Super_L,
	XK.XK_Super_R,
	XK.XK_Hyper_L,
	XK.XK_Hyper_R}
'''

no_index = '''
NO_INDEX = {
	XK.XK_Shift_L,
	XK.XK_Shift_R,
	XK.XK_Caps_Lock,
	XK.XK_Num_Lock,
	XK.XK_Shift_Lock,
	XK.XK_ISO_Level3_Shift,
	XK.XK_Scroll_Lock,
	XK.XK_Alt_L,
	XK.XK_Alt_R,
	XK.XK_Control_L,
	XK.XK_Control_R,
	XK.XK_Meta_L,
	XK.XK_Meta_R,
	XK.XK_Super_L,
	XK.XK_Super_R,
	XK.XK_Hyper_L,
	XK.XK_Hyper_R,
	XK.XK_Menu,
	XK.XK_Return,
	XK.XK_Escape,
	XK.XK_Insert,
	XK.XK_Delete,
	XK.XK_Home,
	XK.XK_Page_Up,
	XK.XK_Page_Down,
	XK.XK_End,
	XK.XK_F1,
	XK.XK_F2,
	XK.XK_F3,
	XK.XK_F4,
	XK.XK_F5,
	XK.XK_F6,
	XK.XK_F7,
	XK.XK_F8,
	XK.XK_F9,
	XK.XK_F10,
	XK.XK_F11,
	XK.XK_F12,
	XK.XK_Up,
	XK.XK_Down,
	XK.XK_Left,
	XK.XK_Right}
'''

def dedup(seq):
	seen = set()
	seen_add = seen.add
	return [x for x in seq if not (x in seen or seen_add(x))]

with open('/usr/include/X11/keysymdef.h') as keysymdef:
	for line in keysymdef:
		for group in groups:
			if line.startswith('#ifdef {0}'.format(group)):
				parse = True
			if parse:
				if line.startswith('#endif'):
					parse = False
					break
				print_match = print_matcher.search(line)
				if print_match:
					printable.append(
						"\tXK.{0} : '\\u{1}',".format(
						print_match.group(1), print_match.group(2)))

with open('/usr/share/X11/locale/en_US.UTF-8/Compose') as definitions:
	for line in definitions:
		composed_match = composed_matcher.search(line)
		if composed_match:
			if composed_match.group(4) != None:
				composed.append("\t(XK.XK_{0}, XK.XK_{1}, XK.XK_{2}, XK.XK_{3}) : "\
				.format(composed_match.group(1), composed_match.group(2), composed_match.group(3), \
				composed_match.group(4)) + '"""{0}""",'.format(composed_match.group(5)))
			elif composed_match.group(3) != None:
				composed.append("\t(XK.XK_{0}, XK.XK_{1}, XK.XK_{2}) : ".format(
				composed_match.group(1), composed_match.group(2), composed_match.group(3)) + \
				'"""{0}""",'.format(composed_match.group(5)))
			else:
				composed.append("\t(XK.XK_{0}, XK.XK_{1}) : ".format(composed_match.group(1),
				composed_match.group(2)) + '"""{0}""",'.format(composed_match.group(5)))

printable = dedup(printable)

with open('../CONSTANTS.py', 'w') as constants:
	constants.write(warning)
	constants.write(imports)
	constants.write('\nPRINTABLE = {\n')
	constants.write('\n'.join(printable))
	constants.write(keypad)
	#~ constants.write('COMPOSED = {\n')
	#~ constants.write('\n'.join(composed))
	#~ constants.write('}\n')
	constants.write(modifiers)
	constants.write(no_index)
